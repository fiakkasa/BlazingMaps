<div class="address-search-container position-fixed overflow-hidden d-flex flex-column">
    <div class="address-search-input-container input-group flex-shrink-0 p-1">
        <input type="search"
               class="address-search-input form-control"
               placeholder="Search.."
               disabled="@Disabled"
               value="@_searchToken"
               @oninput="OnInputHandler"
               @onkeypress="OnKeypressHandler" />
        <button class="btn btn-sm btn-light" type="button" disabled="@Disabled" @onclick="SearchAddress">
            <span class="fa-solid fa-magnifying-glass"></span>
        </button>
        @if (_searchToken.Length > 0)
        {
            <button class="btn btn-sm btn-light" type="button" disabled="@Disabled" @onclick="Clear">
                <span class="fa-solid fa-x"></span>
            </button>
        }
    </div>

    <div class="address-search-results-container flex-fill overflow-auto p-1 pt-0 d-grid gap-2">
        @if (Home is { })
        {
            <button type="button" class="btn btn-sm @SelectedClass(Home.Id)" @onclick="_ => SetSelection(Home)">
                @Home.DisplayText
            </button>
        }
        @if (SearchResults is { Count: > 0 })
        {
            <Virtualize Items="SearchResults">
                <button type="button" class="btn btn-sm @SelectedClass(context.Id)" @onclick="_ => SetSelection(context)">
                    @context.DisplayText
                </button>
            </Virtualize>
        }
    </div>

</div>

@code {
    [Parameter] public List<AddressLookup>? SearchResults { get; set; }
    [Parameter] public AddressLookup? Home { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public EventCallback<string> OnSearchTokenChanged { get; set; }
    [Parameter] public EventCallback<string> OnSelectionChanged { get; set; }

    private string _selected = string.Empty;
    private string _searchToken = string.Empty;

    private string SelectedClass(string id) => _selected == id ? "btn-primary" : "btn-secondary";

    private async Task Clear()
    {
        _searchToken = string.Empty;
        _selected = string.Empty;
        await OnSearchTokenChanged.InvokeAsync(_searchToken);
        await OnSelectionChanged.InvokeAsync(_selected);
    }

    private async Task OnInputHandler(ChangeEventArgs ev)
    {
        var prevToken = _searchToken.Trim();
        _searchToken = ev.Value?.ToString() ?? string.Empty;
        var currToken = _searchToken.Trim();

        if (prevToken != currToken && currToken.Length == 0)
            await Clear();
    }

    private async Task OnKeypressHandler(KeyboardEventArgs ev)
    {
        if (ev.Code == "Enter") await SearchAddress();
    }

    private async Task SearchAddress()
    {
        _selected = string.Empty;
        await OnSearchTokenChanged.InvokeAsync(_searchToken);
        await OnSelectionChanged.InvokeAsync(_selected);
    }

    private async Task SetSelection(AddressLookup item)
    {
        _selected = _selected == item.Id ? string.Empty : item.Id;
        await OnSelectionChanged.InvokeAsync(_selected);
    }
}
