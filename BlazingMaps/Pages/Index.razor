@page "/"
@using Darnton.Blazor.DeviceInterop.Geolocation
@inject IAddressLookupService als
@inject IMarkerFactory mf
@inject IOptionsSnapshot<MapOptionsEx> mapOptions
@inject IGeolocationService gs
@implements IDisposable

<Search Home="_home"
        SearchResults="_searchResults"
        Disabled="_searching"
        OnSelectionChanged="SetSelection"
        OnSearchTokenChanged="Search" />

<div class="map-container">
    <Map @ref="mapRef" MapOptions="@mapOptions.Value"></Map>
</div>

@code {
    private Map? mapRef;
    private List<AddressLookup> _searchResults = new();
    private AddressLookup? _home;
    private Marker? _selectedMarker;
    private bool _searching = false;
    private CancellationTokenSource _cts = new();

    private async Task ClearMarker()
    {
        if (_selectedMarker is not { }) return;

        await _selectedMarker.Remove();
        _selectedMarker = null;
    }

    private async Task Search(string searchToken)
    {
        _searching = true;

        await ClearMarker();

        _searchResults = (await als.Fetch(searchToken, _cts.Token)).ToList();

        _searching = false;
    }

    private async Task SetSelection(string selectedId)
    {
        if (mapRef is not { }) return;

        await ClearMarker();

        if (selectedId == string.Empty || _searchResults.Prepend(_home).FirstOrDefault(x => x?.Id == selectedId) is not { } item)
            return;

        var ll = new LatLng() { Lat = item.Lat, Lng = item.Lon };
        await mapRef.SetView(new() { Lat = item.Lat, Lng = item.Lon });
        _selectedMarker = await mf.CreateAndAddToMap(ll, mapRef);

        if (await mapRef.GetZoom() < mapOptions.Value.ZoomOnSelection)
        {
            await Task.Delay(250);
            await mapRef.SetZoom(mapOptions.Value.ZoomOnSelection);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentPosition = await gs.GetCurrentPosition();

            _home = new()
            {
                Text = "<span class=\"fa-solid fa-house\"></span> Home",
                Lat = currentPosition.Position.Coords.Latitude,
                Lon = currentPosition.Position.Coords.Longitude
            };
        }
        catch
        {
            _home = new()
            {
                Text = "<span class=\"fa-solid fa-house\"></span> Home",
                Lat = mapOptions.Value.Center.Lat,
                Lon = mapOptions.Value.Center.Lng,
            };
        }

        await SetSelection(_home.Id);
    }

    public void Dispose()
    {
        _cts.Dispose();
    }
}
